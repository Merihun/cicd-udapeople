version: 2.1

orbs:
  slack: circleci/slack@4.1.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-3e571a3
            aws cloudformation delete-stack --stack-name frontend-3e571a3
            exit 0

  extract-commit-message:
    description: Extract commit message
    steps:
      - run:
          name: Extract commit message
          when: always
          command: |
            echo "export COMMIT_MESSAGE=\"$(git log --format=%B -n 1 $CIRCLE_SHA1)\"" >> $BASH_ENV
            source $BASH_ENV

  slack-notification-fail:
    description: Send notification to Slack
    steps:
      - extract-commit-message

      - slack/notify:
          channel: C01FC0ZPENR
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Your job *$CIRCLE_JOB* has *faild* :octagonal_sign: (<$CIRCLE_BUILD_URL|build #$CIRCLE_BUILD_NUM>)\n\nrepo: $CIRCLE_REPOSITORY_URL\n\nbranch: $CIRCLE_BRANCH\n\ncommitter: $CIRCLE_USERNAME\n\ncommit message: $COMMIT_MESSAGE"
                  }
                }
              ]
            }

  slack-notification-pass:
    description: Send notification to Slack
    steps:
      - extract-commit-message

      - slack/notify:
          channel: C01FC0ZPENR
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                      "type": "mrkdwn",
                      "text": "Your job *$CIRCLE_JOB* has *built* :white_check_mark: (<$CIRCLE_BUILD_URL|build #$CIRCLE_BUILD_NUM>)\n\nrepo: $CIRCLE_REPOSITORY_URL\n\nbranch: $CIRCLE_BRANCH\n\ncommitter: $CIRCLE_USERNAME\n\ncommit message: $COMMIT_MESSAGE"
                  }
                }
              ]
            }

#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#      #parameters:
#    # Add parameter here
#    steps:
#      - run:
#          name: Revert migrations
#          # Add when this will run
#          command: |
#            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#            SUCCESS = 1
#            if(( $SUCCESS==1 ));
#            then
#            #  cd ~/project/backend
#            #  npm install
#            #  Add revert code here. You can find this in the Getting Started section.
#              exit 1
#            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - run:
          name: Frontend Build
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          key: v1-frontend-build
          paths:
            - ~/project/frontend/node_modules

      - slack-notification-fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run build

      - save_cache:
          key: v1-backend-build
          paths:
            - ~/project/backend/node_modules

      - slack-notification-fail

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - restore_cache:
          key: v1-frontend-build

      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm i
            npm run test

      - slack-notification-fail

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - restore_cache:
          key: v1-backend-build

      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test

      - slack-notification-fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - restore_cache:
          key: frontend-build

      - run:
          name: Scan frontend depedencies
          command: |
            cd frontend
            npm audit --audit-level=critical

      - slack-notification-fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - restore_cache:
          key: backend-build

      - run:
          name: Scan backend depedencies
          command: |
            cd backend
            npm audit --audit-level=critical

      - slack-notification-fail

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip jq git

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # build-backend:
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-3e571a3" \
              --parameter-overrides ID="3e571a3"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            backendDns=`aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-3e571a3" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text`

            echo $backendDns >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

            # put it in the shared memory
            curl -H "Content-Type: text/plain" \
              -H "token: e38aee29-a976-4696-843d-2d115c52219a" \
              --request PUT \
              --data "$backendDns" https://api.memstash.io/values/backendDns

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            # build-frontend:
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "frontend-3e571a3" \
            --parameter-overrides ID="3e571a3"
# {CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - slack-notification-fail

  configure-infrastructure:
    docker:
      - image: willhallonline/ansible:2.10-ubuntu-18.04
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - "12:ed:24:97:4a:cc:64:0a:0f:8d:c8:dd:ab:49:ca:4b"

      - run:
          name: Install dependencies
          command: |
            apt update
            apt -y install jq tar gzip git curl

      - attach_workspace:
          at: ~/

      - run:
          name: Avoid hosts unknown
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook configure-server.yml --inventory-file=inventory.txt

      - slack-notification-fail

#  run-migrations:
#    docker:
#    # Docker image here that supports NodeJS
#    steps:
#      # Checkout code from git
#      - run:
#          name: Run migrations
#          command: |
#            # Your code here
#            exit 1
#      - run:
#          name: Send migration results to memstash
#          command: |
#            # Your code here
#            exit 1
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
#      - build-frontend:
#          context: slack
#      - build-backend:
#          context: slack
#      - test-frontend:
#          context: slack
#          requires: [build-frontend]
#      - test-backend:
#          context: slack
#          requires: [build-backend]
#      - scan-backend:
#          context: slack
#          requires: [test-backend]
#      - scan-frontend:
#          context: slack
#          requires: [test-frontend]
      - deploy-infrastructure:
          context: slack
#          requires:
#            - scan-backend
#            - scan-frontend
#            - test-backend
#            - test-frontend
      - configure-infrastructure:
          context: slack
          requires: [deploy-infrastructure]